{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "2294729286329363222"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "hubVirtualNetworkName": {
      "type": "string",
      "defaultValue": "hub-vnet",
      "metadata": {
        "description": "Hub Vnet name"
      }
    },
    "spokeNetworkCount": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "Number of spoke networks to be created"
      }
    },
    "ipgroups_name1": {
      "type": "string",
      "defaultValue": "Jumpserver-IPgroup",
      "metadata": {
        "description": "Names for the IP Groups to use in Az Firewall rules"
      }
    },
    "ipgroups_name2": {
      "type": "string",
      "defaultValue": "Servers-IPgroup"
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPasswordOrKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_B1ms",
      "metadata": {
        "description": "Zone numbers e.g. 1,2,3."
      }
    },
    "OSVersion": {
      "type": "string",
      "defaultValue": "2019-datacenter-gensecond",
      "allowedValues": [
        "2016-datacenter-gensecond",
        "2016-datacenter-server-core-g2",
        "2016-datacenter-server-core-smalldisk-g2",
        "2016-datacenter-smalldisk-g2",
        "2016-datacenter-with-containers-g2",
        "2016-datacenter-zhcn-g2",
        "2019-datacenter-core-g2",
        "2019-datacenter-core-smalldisk-g2",
        "2019-datacenter-core-with-containers-g2",
        "2019-datacenter-core-with-containers-smalldisk-g2",
        "2019-datacenter-gensecond",
        "2019-datacenter-smalldisk-g2",
        "2019-datacenter-with-containers-g2",
        "2019-datacenter-with-containers-smalldisk-g2",
        "2019-datacenter-zhcn-g2",
        "2022-datacenter-azure-edition",
        "2022-datacenter-azure-edition-core",
        "2022-datacenter-azure-edition-core-smalldisk",
        "2022-datacenter-azure-edition-smalldisk",
        "2022-datacenter-core-g2",
        "2022-datacenter-core-smalldisk-g2",
        "2022-datacenter-g2",
        "2022-datacenter-smalldisk-g2"
      ],
      "metadata": {
        "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
      }
    },
    "securityType": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": ["Standard", "TrustedLaunch"],
      "metadata": {
        "description": "Security Type of the Virtual Machine."
      }
    },
    "numberOfFirewallPublicIPAddresses": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Number of public IP addresses for the Azure Firewall"
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "azureFirewallIpConfigurations",
        "count": "[length(range(0, parameters('numberOfFirewallPublicIPAddresses')))]",
        "input": {
          "name": "[format('IpConf{0}', range(0, parameters('numberOfFirewallPublicIPAddresses'))[copyIndex('azureFirewallIpConfigurations')])]",
          "properties": {
            "subnet": {
              "id": "[if(equals(range(0, parameters('numberOfFirewallPublicIPAddresses'))[copyIndex('azureFirewallIpConfigurations')], 0), variables('azureFirewallSubnetId'), null())]"
            },
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', variables('azureFiewallPIPNamePrefix'), add(range(0, parameters('numberOfFirewallPublicIPAddresses'))[range(0, parameters('numberOfFirewallPublicIPAddresses'))[copyIndex('azureFirewallIpConfigurations')]], 1)))]"
            }
          }
        }
      }
    ],
    "hubVnetAddressPrefix": "10.0.0.0/16",
    "jumpBoxSubnetName": "JumpboxSubnet",
    "jumpboxSubnetPrefix": "10.0.1.0/24",
    "JumpBoxSubnetNSGName": "[format('{0}-nsg', variables('jumpBoxSubnetName'))]",
    "spokeNetworkName": ["Spoke1-Vnet", "Spoke2-Vnet"],
    "spokeVnetAddressPrefix": ["10.1.0.0/16", "10.2.0.0/16"],
    "spokeSubnetName": ["Spoke1-ServersSubnet", "Spoke2-ServersSubnet"],
    "spokeSubnetAddressPrefixes": ["10.1.1.0/24", "10.2.1.0/24"],
    "jumpBoxPublicIPAddressName": "JumpHostPublicIP",
    "jumpBoxNicName": "JumpHostNic",
    "jumpBoxSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('hubVirtualNetworkName'), variables('jumpBoxSubnetName'))]",
    "spokeServerNicName": "ServerNic",
    "storageAccountName": "[format('sajumpbox{0}', uniqueString(resourceGroup().id))]",
    "hubRouteTableName": "HubRouteTable",
    "spokeRouteTableName": "SpokeRouteTable",
    "nextHopIP": "10.0.120.4",
    "bastionHostName": "hubBastion",
    "bastionSubnetName": "AzureBastionSubnet",
    "bastionSubnetPrefix": "10.0.60.0/26",
    "bastionSubnetID": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('hubVirtualNetworkName'), variables('bastionSubnetName'))]",
    "firewallName": "hub-firewall",
    "azureFirewallSubnetName": "AzureFirewallSubnet",
    "azureFirewallSubnetPrefix": "10.0.120.0/26",
    "azureFiewallPIPNamePrefix": "Firewall-PIP",
    "azureFirewallSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('hubVirtualNetworkName'), variables('azureFirewallSubnetName'))]",
    "securityProfileJson": {
      "uefiSettings": {
        "secureBootEnabled": true,
        "vTpmEnabled": true
      },
      "securityType": "[parameters('securityType')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[parameters('hubVirtualNetworkName')]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "[parameters('hubVirtualNetworkName')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[variables('hubVnetAddressPrefix')]"]
        },
        "subnets": [
          {
            "name": "[variables('jumpBoxSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('jumpboxSubnetPrefix')]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('hubRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('JumpBoxSubnetNSGName'))]"
              }
            }
          },
          {
            "name": "[variables('bastionSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('bastionSubnetPrefix')]"
            }
          },
          {
            "name": "[variables('azureFirewallSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('azureFirewallSubnetPrefix')]"
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', variables('hubRouteTableName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('JumpBoxSubnetNSGName'))]"
      ]
    },
    {
      "copy": {
        "name": "spokeVirtualNetwork",
        "count": "[length(range(0, parameters('spokeNetworkCount')))]"
      },
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[copyIndex()]]]",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "[variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[copyIndex()]]]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('spokeVnetAddressPrefix')[range(0, parameters('spokeNetworkCount'))[copyIndex()]]]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('spokeSubnetName')[range(0, parameters('spokeNetworkCount'))[copyIndex()]]]",
            "properties": {
              "addressPrefix": "[variables('spokeSubnetAddressPrefixes')[range(0, parameters('spokeNetworkCount'))[copyIndex()]]]",
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('spokeRouteTableName'))]"
              },
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('Spoke{0}-NSG', add(range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]], 1)))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/routeTables', variables('spokeRouteTableName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', format('Spoke{0}-NSG', add(range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]], 1)))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2023-04-01",
      "name": "[variables('hubRouteTableName')]",
      "location": "[parameters('location')]",
      "properties": {
        "disableBgpRoutePropagation": false,
        "routes": [
          {
            "name": "InternetDefaultRoute",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          },
          {
            "name": "To-Spoke1Vnet",
            "properties": {
              "addressPrefix": "10.1.0.0/16",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          },
          {
            "name": "To-Spoke2Vnet",
            "properties": {
              "addressPrefix": "10.2.0.0/16",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2023-04-01",
      "name": "[variables('spokeRouteTableName')]",
      "location": "[parameters('location')]",
      "properties": {
        "disableBgpRoutePropagation": false,
        "routes": [
          {
            "name": "InternetDefaultRoute",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          },
          {
            "name": "To-JumpserverSubnet",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          },
          {
            "name": "To-Spoke1Vnet",
            "properties": {
              "addressPrefix": "10.1.0.0/16",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          },
          {
            "name": "To-Spoke2Vnet",
            "properties": {
              "addressPrefix": "10.2.0.0/16",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[variables('nextHopIP')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "[variables('jumpBoxPublicIPAddressName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[variables('JumpBoxSubnetNSGName')]",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-04-01",
      "name": "[variables('jumpBoxNicName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpBoxPublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('jumpBoxSubnetId')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpBoxPublicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-03-01",
      "name": "JumpBox",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "JumpBox",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('jumpBoxNicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01').primaryEndpoints.blob]"
          }
        },
        "securityProfile": "[if(equals(parameters('securityType'), 'TrustedLaunch'), variables('securityProfileJson'), null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('jumpBoxNicName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "copy": {
        "name": "spokeSubnetNSG",
        "count": "[length(range(0, parameters('spokeNetworkCount')))]"
      },
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[format('Spoke{0}-NSG', add(range(0, parameters('spokeNetworkCount'))[copyIndex()], 1))]",
      "location": "[parameters('location')]",
      "properties": {}
    },
    {
      "copy": {
        "name": "spokeServerNic",
        "count": "[length(range(0, parameters('spokeNetworkCount')))]"
      },
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}-{1}', variables('spokeServerNicName'), add(range(0, parameters('spokeNetworkCount'))[copyIndex()], 1))]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/VirtualNetworks/subnets', variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]]], variables('spokeSubnetName')[range(0, parameters('spokeNetworkCount'))[copyIndex()]])]"
              }
            }
          }
        ]
      },
      "dependsOn": ["spokeVirtualNetwork"]
    },
    {
      "copy": {
        "name": "spoke1ServerWindowsVM",
        "count": "[length(range(0, parameters('spokeNetworkCount')))]"
      },
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-03-01",
      "name": "[format('Spoke{0}-Server', add(range(0, parameters('spokeNetworkCount'))[copyIndex()], 1))]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "Spoke1-Server",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('OSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}', variables('spokeServerNicName'), add(range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]], 1)))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-01-01').primaryEndpoints.blob]"
          }
        },
        "securityProfile": "[if(equals(parameters('securityType'), 'TrustedLaunch'), variables('securityProfileJson'), null())]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', format('{0}-{1}', variables('spokeServerNicName'), add(range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]], 1)))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "Bastion-pip",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "type": "Microsoft.Network/bastionHosts",
      "apiVersion": "2023-04-01",
      "name": "[variables('bastionHostName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "subnet": {
                "id": "[variables('bastionSubnetID')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'Bastion-pip')]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', 'Bastion-pip')]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
      ]
    },
    {
      "copy": {
        "name": "FirewallPIP",
        "count": "[length(range(0, parameters('numberOfFirewallPublicIPAddresses')))]"
      },
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2023-04-01",
      "name": "[format('{0}{1}', variables('azureFiewallPIPNamePrefix'), add(range(0, parameters('numberOfFirewallPublicIPAddresses'))[copyIndex()], 1))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4"
      }
    },
    {
      "type": "Microsoft.Network/azureFirewalls",
      "apiVersion": "2023-04-01",
      "name": "[variables('firewallName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": "[variables('azureFirewallIpConfigurations')]"
      },
      "dependsOn": [
        "FirewallPIP",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/ipGroups",
      "apiVersion": "2023-04-01",
      "name": "[parameters('ipgroups_name1')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipAddresses": ["10.0.1.0/24"]
      }
    },
    {
      "type": "Microsoft.Network/ipGroups",
      "apiVersion": "2023-04-01",
      "name": "[parameters('ipgroups_name2')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipAddresses": ["10.1.1.0/24", "10.2.1.0/24"]
      }
    },
    {
      "copy": {
        "name": "hubPeering",
        "count": "[length(range(0, parameters('spokeNetworkCount')))]"
      },
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-07-01",
      "name": "[format('{0}/{1}', parameters('hubVirtualNetworkName'), format('Hub-to-Spoke{0}', add(range(0, parameters('spokeNetworkCount'))[copyIndex()], 1)))]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": false,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]]])]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]]])]"
      ]
    },
    {
      "copy": {
        "name": "spokePeering",
        "count": "[length(range(0, parameters('spokeNetworkCount')))]"
      },
      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
      "apiVersion": "2020-07-01",
      "name": "[format('{0}/{1}', variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]]], format('Spoke{0}-to-Hub', add(range(0, parameters('spokeNetworkCount'))[copyIndex()], 1)))]",
      "properties": {
        "allowVirtualNetworkAccess": true,
        "allowForwardedTraffic": true,
        "allowGatewayTransit": false,
        "useRemoteGateways": false,
        "remoteVirtualNetwork": {
          "id": "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('hubVirtualNetworkName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('spokeNetworkName')[range(0, parameters('spokeNetworkCount'))[range(0, parameters('spokeNetworkCount'))[copyIndex()]]])]"
      ]
    }
  ],

  "outputs": {
    "location": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "name": {
      "type": "string",
      "value": "[variables('firewallName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "resourceId": {
      "type": "string",
      "value": "[resourceId('Microsoft.Network/azureFirewalls', variables('firewallName'))]"
    }
  }
}
